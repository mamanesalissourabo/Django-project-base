# Generated by Django 5.1.7 on 2025-03-10 12:56

import base.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=30, verbose_name='Raison sociale')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('address1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('address2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('city', models.CharField(max_length=15, verbose_name='Ville')),
                ('licence', models.CharField(blank=True, max_length=15, null=True, verbose_name='Patente')),
                ('registration_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='Registre de commerce')),
                ('social_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='Num CNSS')),
                ('tax_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='Identifiant fiscal')),
                ('company_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='ICE')),
                ('company_form', models.CharField(blank=True, choices=[('sarl', 'SARL'), ('sarlau', 'SARL AU'), ('sa', 'SA')], max_length=10, null=True, verbose_name='Forme juridique')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='logo', verbose_name='Logo')),
            ],
            options={
                'verbose_name': 'Société',
                'verbose_name_plural': 'Sociétés',
                'db_table': 'base_company',
                'ordering': ['name'],
                'permissions': (),
                'abstract': False,
                'default_permissions': ['add', 'change', 'view', 'soft_delete'],
            },
        ),
        migrations.CreateModel(
            name='PerimeterCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Catégorie de périmètres',
                'verbose_name_plural': 'Catégories de périmètres',
                'db_table': 'base_perimeter_category',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('username', models.CharField(blank=True, default='deprecated', max_length=150, null=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Adresse email')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Numéro de téléphone')),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('adresse', models.CharField(blank=True, max_length=30)),
                ('company', models.CharField(blank=True, max_length=30, null=True, verbose_name='Société')),
                ('is_internal', models.BooleanField(blank=True, default=False, help_text="Cocher si l'utilisateur est un employé de la société.", verbose_name='Utilisateur interne ?')),
                ('welcome_email_to_send', models.BooleanField(default=True, help_text="L'email ne sera envoyé que si des comptes ou des périmètres sont associés à l'utilisateur", verbose_name='Envoyer un email de bienvenue?')),
                ('welcome_email_sent', models.BooleanField(default=False, verbose_name='Email de bienvenue envoyé?')),
                ('role', models.CharField(blank=True, choices=[('technicien', 'Technicien'), ('gestionnaire', 'Gestionnaire'), ('livreur', 'Livreur'), ('vendeur', 'Vendeur')], default='technicien', max_length=50, verbose_name="Type d'utilisateur")),
                ('photo', models.ImageField(blank=True, upload_to='profile_img', verbose_name='photo de profil')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
                'db_table': 'base_user',
                'abstract': False,
                'default_permissions': ['add', 'change', 'view', 'soft_delete'],
            },
            managers=[
                ('objects', base.models.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HistoricalCompany',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=30, verbose_name='Raison sociale')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('address1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('address2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('city', models.CharField(max_length=15, verbose_name='Ville')),
                ('licence', models.CharField(blank=True, max_length=15, null=True, verbose_name='Patente')),
                ('registration_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='Registre de commerce')),
                ('social_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='Num CNSS')),
                ('tax_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='Identifiant fiscal')),
                ('company_id', models.CharField(blank=True, max_length=15, null=True, verbose_name='ICE')),
                ('company_form', models.CharField(blank=True, choices=[('sarl', 'SARL'), ('sarlau', 'SARL AU'), ('sa', 'SA')], max_length=10, null=True, verbose_name='Forme juridique')),
                ('logo', models.TextField(blank=True, max_length=100, null=True, verbose_name='Logo')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Société',
                'verbose_name_plural': 'historical Sociétés',
                'db_table': 'base_company_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPerimeterCategory',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Catégorie de périmètres',
                'verbose_name_plural': 'historical Catégories de périmètres',
                'db_table': 'base_perimeter_category_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSite',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=30, verbose_name='Nom')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('address1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('address2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('city', models.CharField(blank=True, max_length=15, null=True, verbose_name='Ville')),
                ('reference', models.CharField(db_index=True, max_length=5, verbose_name='Ref')),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Longitude')),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Latitude')),
                ('stamp_rate', models.DecimalField(decimal_places=3, default=0, help_text='Entre 0 et 100', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Taux de droits de timbre (%)')),
                ('region', models.CharField(choices=[('MA01', 'Tanger-Tétouan-Al Hoceïma'), ('MA02', "L'Oriental"), ('MA03', 'Fès-Meknès'), ('MA04', 'Rabat-Salé-Kénitra'), ('MA05', 'Béni Mellal-Khénifra'), ('MA06', 'Casablanca-Settat'), ('MA07', 'Marrakech-Safi'), ('MA08', 'Drâa-Tafilalet'), ('MA09', 'Souss-Massa'), ('MA10', 'Guelmim-Oued Noun'), ('MA11', 'Laâyoune-Sakia El Hamra'), ('MA12', 'Dakhla-Oued Ed-Dahab'), ('ATRE', 'Autre / Etranger')], max_length=6, verbose_name='Région')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('company', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.company', verbose_name='Société')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Site',
                'verbose_name_plural': 'historical Sites',
                'db_table': 'base_site_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Date de création')),
                ('read_at', models.DateTimeField(blank=True, null=True, verbose_name='Lu le')),
                ('title', models.CharField(max_length=100, verbose_name='Titre')),
                ('message', models.CharField(max_length=500, verbose_name='Message')),
                ('object_id', models.PositiveIntegerField(verbose_name="ID de l'objet")),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='contenttypes.contenttype', verbose_name='Type de contenu')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'base_notification',
            },
        ),
        migrations.CreateModel(
            name='Perimeter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('external_id', models.CharField(max_length=12, verbose_name='Référence')),
                ('display_order', models.PositiveIntegerField(default=100, verbose_name="Ordre d'affichage")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='base.perimeter', verbose_name='parent')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.perimetercategory', verbose_name='Catégorie')),
            ],
            options={
                'verbose_name': 'Périmètre',
                'verbose_name_plural': 'Périmètres',
                'db_table': 'base_perimeter',
                'ordering': ['display_order'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalUserPerimeterRel',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('email_notify_new_order', models.BooleanField(default=True, verbose_name='Notifier les nouvelles incidents par email')),
                ('email_notify_new_ticket', models.BooleanField(default=True, verbose_name='Notifier les nouveaux tickets par email')),
                ('web_notifications', models.BooleanField(default=True, verbose_name='Notifications web')),
                ('assign_tickets', models.BooleanField(default=True, help_text="Un seul utilisateur peut être associé à un périmètre pour l'assignation des tickets", verbose_name='Assigner des tickets')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
                ('perimeter', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.perimeter', verbose_name='Périmètre')),
            ],
            options={
                'verbose_name': 'historical Relation Utilisateur - Périmètre',
                'verbose_name_plural': 'historical Relations Utilisateur - Périmètre',
                'db_table': 'base_user_perimeter_rel_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('deleted', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=30, verbose_name='Nom')),
                ('phone', models.CharField(blank=True, max_length=16, null=True, verbose_name='Téléphone')),
                ('address1', models.CharField(blank=True, max_length=30, null=True, verbose_name='Adresse')),
                ('address2', models.CharField(blank=True, max_length=30, null=True, verbose_name='Suite')),
                ('city', models.CharField(blank=True, max_length=15, null=True, verbose_name='Ville')),
                ('reference', models.CharField(max_length=5, unique=True, verbose_name='Ref')),
                ('longitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Longitude')),
                ('latitude', models.FloatField(validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Latitude')),
                ('stamp_rate', models.DecimalField(decimal_places=3, default=0, help_text='Entre 0 et 100', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)], verbose_name='Taux de droits de timbre (%)')),
                ('region', models.CharField(choices=[('MA01', 'Tanger-Tétouan-Al Hoceïma'), ('MA02', "L'Oriental"), ('MA03', 'Fès-Meknès'), ('MA04', 'Rabat-Salé-Kénitra'), ('MA05', 'Béni Mellal-Khénifra'), ('MA06', 'Casablanca-Settat'), ('MA07', 'Marrakech-Safi'), ('MA08', 'Drâa-Tafilalet'), ('MA09', 'Souss-Massa'), ('MA10', 'Guelmim-Oued Noun'), ('MA11', 'Laâyoune-Sakia El Hamra'), ('MA12', 'Dakhla-Oued Ed-Dahab'), ('ATRE', 'Autre / Etranger')], max_length=6, verbose_name='Région')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='sites', to='base.company', verbose_name='Société')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
                'db_table': 'base_site',
                'ordering': ['name'],
                'permissions': (),
                'abstract': False,
                'default_permissions': ['add', 'change', 'view', 'soft_delete'],
            },
        ),
        migrations.AddField(
            model_name='perimeter',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='perimeters', to='base.site', verbose_name='Site'),
        ),
        migrations.CreateModel(
            name='HistoricalUser',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('deleted', models.BooleanField(default=False)),
                ('username', models.CharField(blank=True, default='deprecated', max_length=150, null=True)),
                ('email', models.EmailField(db_index=True, max_length=254, verbose_name='Adresse email')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Numéro de téléphone')),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('adresse', models.CharField(blank=True, max_length=30)),
                ('company', models.CharField(blank=True, max_length=30, null=True, verbose_name='Société')),
                ('is_internal', models.BooleanField(blank=True, default=False, help_text="Cocher si l'utilisateur est un employé de la société.", verbose_name='Utilisateur interne ?')),
                ('welcome_email_to_send', models.BooleanField(default=True, help_text="L'email ne sera envoyé que si des comptes ou des périmètres sont associés à l'utilisateur", verbose_name='Envoyer un email de bienvenue?')),
                ('welcome_email_sent', models.BooleanField(default=False, verbose_name='Email de bienvenue envoyé?')),
                ('role', models.CharField(blank=True, choices=[('technicien', 'Technicien'), ('gestionnaire', 'Gestionnaire'), ('livreur', 'Livreur'), ('vendeur', 'Vendeur')], default='technicien', max_length=50, verbose_name="Type d'utilisateur")),
                ('photo', models.TextField(blank=True, max_length=100, verbose_name='photo de profil')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('site', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'historical Utilisateur',
                'verbose_name_plural': 'historical Utilisateurs',
                'db_table': 'base_user_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPerimeter',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('deleted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('name', models.CharField(max_length=100, verbose_name='Nom')),
                ('external_id', models.CharField(max_length=12, verbose_name='Référence')),
                ('display_order', models.PositiveIntegerField(default=100, verbose_name="Ordre d'affichage")),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.perimeter', verbose_name='parent')),
                ('category', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.perimetercategory', verbose_name='Catégorie')),
                ('site', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='base.site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'historical Périmètre',
                'verbose_name_plural': 'historical Périmètres',
                'db_table': 'base_perimeter_history',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.AddField(
            model_name='user',
            name='site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='base.site', verbose_name='Site'),
        ),
        migrations.CreateModel(
            name='UserPerimeterRel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_notify_new_order', models.BooleanField(default=True, verbose_name='Notifier les nouvelles incidents par email')),
                ('email_notify_new_ticket', models.BooleanField(default=True, verbose_name='Notifier les nouveaux tickets par email')),
                ('web_notifications', models.BooleanField(default=True, verbose_name='Notifications web')),
                ('assign_tickets', models.BooleanField(default=True, help_text="Un seul utilisateur peut être associé à un périmètre pour l'assignation des tickets", verbose_name='Assigner des tickets')),
                ('perimeter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_rels', to='base.perimeter', verbose_name='Périmètre')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='perimeter_rels', to=settings.AUTH_USER_MODEL, verbose_name='Utilisateur')),
            ],
            options={
                'verbose_name': 'Relation Utilisateur - Périmètre',
                'verbose_name_plural': 'Relations Utilisateur - Périmètre',
                'db_table': 'base_user_perimeter_rel',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='perimeters',
            field=models.ManyToManyField(blank=True, related_name='users', through='base.UserPerimeterRel', to='base.perimeter', verbose_name='Périmètres'),
        ),
        migrations.AlterUniqueTogether(
            name='perimeter',
            unique_together={('display_order', 'site')},
        ),
        migrations.AddConstraint(
            model_name='userperimeterrel',
            constraint=models.UniqueConstraint(condition=models.Q(('assign_tickets', True)), fields=('perimeter', 'assign_tickets'), name='unique_perimeter_assign_tickets'),
        ),
        migrations.AlterUniqueTogether(
            name='userperimeterrel',
            unique_together={('user', 'perimeter')},
        ),
    ]
